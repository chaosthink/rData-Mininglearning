###第六部分，正则化 文本回归
###多项式回归能适用于非线性模型，但会产生相应的噪声

#产生正弦数据
set.seed(1)
x<- seq(0,1,by=0.01)
y<- sin(2*pi*x)+rnorm(length(x),0,0.1)
df<- data.frame(x=x,y=y)
ggplot(df,aes(x=x,y=y))+geom_point()+geom_smooth(method='lm',se=F)


##尝试拟合线性模型
summary(lm(y~x,data=df))
###效果还可以，但显然是存在问题的
df<- transform(df,x2=x^2)
df<- transform(df,x3=x^3) ##增加两列数据
summary(lm(y~x+x2+x3,data=df)
##r方提升，但是再继续增加项数已经难以正常拟合
##尝试用垂直正交的方法来拟合
summary(lm(y~poly(x,degree=14),data=df))
##比较不同阶次的模型
poly.fit<- lm(y~poly(x,1),data=df)
df<- transform(df,prey=predict(poly.fit))
ggplot(df,aes(x=x,y=prey))+geom_point()+geom_line()

poly.fit<- lm(y~poly(x,3),data=df)
df<- transform(df,prey=predict(poly.fit))
ggplot(df,aes(x=x,y=prey))+geom_point()+geom_line()  #3次很接近正玄波了

poly.fit<- lm(y~poly(x,5),data=df)
df<- transform(df,prey=predict(poly.fit))
ggplot(df,aes(x=x,y=prey))+geom_point()+geom_line() #5次跟3次差不多

poly.fit<- lm(y~poly(x,15),data=df)
df<- transform(df,prey=predict(poly.fit))
ggplot(df,aes(x=x,y=prey))+geom_point()+geom_line() #15次前后有些歪斜

poly.fit<- lm(y~poly(x,25),data=df)
df<- transform(df,prey=predict(poly.fit))
ggplot(df,aes(x=x,y=prey))+geom_point()+geom_line()  ##25次已经彻底变形了
##出现过拟合的问题，下面探究如何避免过拟合  使用交叉验证（cross-validation） 与正则化
##交叉验证，就是常用的，保留一部分数据作为验证。。
#再创建一遍正弦数据
set.seed(1)
x<- seq(0,1,by=0.01)
y<- sin(2*pi*x)+rnorm(length(x),0,0.1)

n<- length(x)
indices<-sort(sample(1:n,round(0.5*n)))

training.x<- x[indices]
training.y<- y[indices]

test.x<- x[-indices]
test.y<- y[-indices]

training.df<- data.frame(x=training.x,y=training.y)
test.df<- data.frame(x=test.x,y=test.y)

#写一个均方误差的函数来度量拟合效果
rmse<- function(y,h) return(sqrt(mean((y-h)^2)))

#page167
